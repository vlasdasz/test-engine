use anyhow::Result;
use log::debug;
use test_engine::{
    RenderPass, from_main,
    ui::{UI, ViewCallbacks, view},
    ui_test::check_colors,
};

use crate::{occlusion::render_occlusion, path::render_path, render::Case::*};

#[derive(Default)]
enum Case {
    #[default]
    Occlusion,
    Path,
}

#[view]
struct RenderTestView {
    case: Case,
}

impl ViewCallbacks for RenderTestView {
    fn before_render(&self, pass: &mut RenderPass) {
        match self.case {
            Occlusion => {
                render_occlusion(pass);
            }
            Path => {
                render_path(pass);
            }
        }
    }
}

pub async fn test_render() -> Result<()> {
    debug!("Test render");

    let mut view = UI::init_test_view::<RenderTestView>().await;

    check_colors(
        r#"
              36   36 -  89 124 149
              47   41 -  89 124 149
              54   72 - 255   0   0
              74   75 - 255   0   0
              75   75 - 255   0   0
              94   89 - 255   0   0
             109  118 -   0 255   0
             111  111 -   0 255   0
             124  112 -   0 255   0
             124  115 -   0 255   0
             124  118 -   0 255   0
             143  134 -   0   0 231
             144  144 -   0   0 231
             147  153 -  89 124 149
             167  305 -  89 124 149
             152  305 -  89 124 149
             130  286 -   0   0 231
             117  272 -   0   0 231
             115  264 -   0   0 231
             112  262 -   0   0 231
              98  256 -   0 255   0
              96  253 -   0 255   0
              94  248 -   0 255   0
              89  235 -   0 255   0
              78  231 -   0 255   0
              72  221 - 255   0   0
              68  220 - 255   0   0
              62  216 - 255   0   0
              62  212 - 255   0   0
              45  207 -  89 124 149
              43  189 -  89 124 149
              43  348 -  89 124 149
              56  356 - 255   0   0
              60  367 - 255   0   0
              73  378 - 255   0   0
              76  378 -   0 255   0
              78  382 -   0 255   0
              80  382 -   0 255   0
              86  382 -   0 255   0
             105  409 -   0   0 231
             105  396 -   0 255   0
              96  400 -   0 255   0
              93  428 -  89 124 149
             110  418 -   0   0 231
             124  424 -   0   0 231
             131  425 -   0   0 231
             133  426 -   0   0 231
             135  431 -   0   0 231
             148  455 -  89 124 149
             191   95 -  89 124 149
             216   95 -   0 255   0
             230   95 -   0 255   0
             230   95 -   0 255   0
             232   95 -   0 255   0
             232   95 -   0 255   0
             232   95 -   0 255   0
             241   95 -   0 255   0
             244   95 -   0 255   0
             252   95 -   0 255   0
             254   98 -  68  68  68
             256   98 -  68  68  68
             273   98 -  68  68  68
             273   98 -  68  68  68
             280   98 -   0 255   0
             284   98 -   0 255   0
             292   98 -   0 255   0
             315   98 -  89 124 149
             315   98 -  89 124 149
             262  145 -   0 255   0
             262  143 -   0 255   0
             262  136 -   0 255   0
             262   99 -  68  68  68
             262   99 -  68  68  68
             262   92 -  68  68  68
             262   86 -   3 254   3
             260   83 -   0 255   0
             254   75 -   0 255   0
             251   65 -   0 255   0
             251   64 -   0 255   0
             254   31 -  89 124 149
        "#,
    )
    .await?;

    debug!("Occlusion: OK");

    from_main(move || {
        view.case = Path;
    })
    .await;

    check_colors(
        r#"
             167  243 -  89 124 149
             181  243 -  89 124 149
             187  243 -  89 124 149
             220  243 -   0   0 231
             239  239 -  89 124 149
             245  239 -  89 124 149
             294  243 -   0   0 231
             330  247 -   0   0 231
             342  247 -   0   0 231
             366  254 -  89 124 149
             366  302 -  89 124 149
             266  333 -   0   0 231
             274  359 -  89 124 149
             244  376 -  89 124 149
             219  360 -   0   0 231
             206  381 -  89 124 149
             205  398 -  89 124 149
             226  399 -  89 124 149
             249  399 -  89 124 149
             240  326 -   0   0 231
             243  235 -  89 124 149
             249  210 -  89 124 149
             195  230 -  89 124 149
             184  283 -  89 124 149
             222  229 -   0   0 231
             379  233 -   0   0 231
             369  192 -  89 124 149
             369  294 -  89 124 149
             493  184 -  89 124 149
             473  213 - 255   0   0
             440  234 -  89 124 149
             439  345 -  89 124 149
             468  387 - 255   0   0
             484  422 -  89 124 149
             273  307 -   0   0 231
             319  378 -  89 124 149
              69  331 -  89 124 149
             194  116 -  89 124 149
        "#,
    )
    .await?;

    debug!("Path: OK");

    Ok(())
}
